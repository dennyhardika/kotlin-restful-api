// membuat creat product api
1. entity package
  a. Product(data class)
2. repository package
  a. ProductRepository(interface) -> extend JpaRepository
3. service package
  a. ProductService(interface)
4. model package
  a. ProductResponse(data class)
  // format sama dengan entity tapi annotation tidak diperlukan
  b. CreateProductRequest(data class)
5. service/impl
  a. ProductServiceImpl(class)
6. model package
  a. WebResponse(data class)
  // untuk generic data
7. controller package
  a. ProductController(class)
8. Setting "application.properties"
  // menghubungkan dengan settingan compose
9. jalankan dan pastikan sudah berhasil running
10. cek tabel product di pengelola database

// validation (untuk validation jika value null & pemindahan ke bad request 400
1. menambahkan dependencies validation
   // dikarenakan belum ke generate springboot
2. model/CreateProductRequest & service/impl/ProductServiceImpl
  // penyesuaian nullable
3. model/CreateProductRequest
   // menambahkan penekanan NotBlank & NotNull
   // memberi aturan minimal value yang masuk jika value Int
4. validation package
  a. ValidationUtil(class)
5. controller
  a. ErrorController(class)
  // penanggulangan error 500

// menguji create api
1. pastikan docker & application running
2. cek pada postman dengan penyesuaian alamat & perintah
problem : rules -> value price & quantity belum bisa sesuai

// membuat get product api
1. service/ProductService
   a. membuat jalur ke function get
2. service/impl/ProductServiceImpl
   a. membuat function get
       dan memberi respon dan tampilan notFound jika tidak terdapat data pencarian

// membuat update product api
1. service/ProductService
   a. membuat jalur ke function put
2. model/UpdateProductRequest
   a. membuat format sama dengan CreateProductRequest
3. service/impl/ProductServiceImpl
   a. membuat function put
       dan memberi respon dan tampilan jika terdapat ketidak sesuaian

// membuat delete product api
1. service/ProductService
   a. membuat jalur ke function Delete
2. service/impl/ProductServiceImpl
   a. membuat function Delete
          dan memberi respon dan tampilan jika terdapat ketidak sesuaian

// membuat list product api
1. model/ListProductRequest
  a. membuat ListProductRequest
2. service/ProductService
   a. membuat jalur ke function list
3. service/impl/ProductServiceImpl
   a. membuat function list
          dan menampilkan data semua yang tersimpan


#  kotlin-restful-api:
#    container_name: kotlin-restful-api
#    image: kotlin-restful-api:0.0.1
#    ports:
#      - 8080:8080
#    environment:
#      DATABASE_USERNAME: kotlin
#      DATABASE_PASSWORD: kotlin
#      DATABASE_URL: jdbc:postgresql://kotlin-restful-api-postgres:5432/restful-api

# rm -r folder_yang_tidak_diperlukan (hapus folder dalam VPS)
# ls -lh build/libs/kotlin-restful-api-0.0.1-SNAPSHOT.jar (cek ukuran file)
# docker-compose -f docker-compose.yml up -d (Mengolah file docker-compose untuk dijadikan container docker)
# docker build --tag kotlin-restful-api:0.0.1 . (buat image aplikasi)

# 1. unduh dan membuat image postgresql
# 2. membuat container postgresql
# 3. File Jar
# 4. unduh dan membuat image aplikasi (harus diperbarui bila file jar berbeda / build ulang)
# 5. membuat container aplikasi

# sampai dengan controller tanpa modif uprofile ok test API
1. merubah create&update di impl uprofile, no_handphone ke Int()

sumber
@OneToOne(cascade = [CascadeType.ALL])  // CascadeType.ALL akan diterapkan pada Profile
    val profile: Profile? = null

tujuan
tidak diperlukan

sumber
@OneToMany(mappedBy = "user", cascade = [CascadeType.ALL], fetch = FetchType.LAZY)
           val posts: List<Post> = mutableListOf()

tujuan
 @ManyToOne
 val user: User

sumber
 @ManyToMany(fetch = FetchType.LAZY)
 val courses: List<Course> = mutableListOf()

 tujuan
 @ManyToMany(mappedBy = "courses", fetch = FetchType.LAZY)  // ðŸ‘ˆ Tetap gunakan LAZY
     val students: List<Student> = mutableListOf()

     @Service
     class CategoryServiceImpl(
         val categoryRepository: CategoryRepository,
         val productRepository: ProductRepository
     ) : CategoryService {

         @Transactional
         override fun create(request: CreateCategoryWithProductsRequest): CategoryResponse {
             // Validasi request
             if (request.nama_kategori.isNullOrBlank()) {
                 throw IllegalArgumentException("Nama kategori tidak boleh kosong")
             }
             if (request.products.isNullOrEmpty()) {
                 throw IllegalArgumentException("Produk tidak boleh kosong")
             }

             // Buat kategori
             val category = Category(nama_kategori = request.nama_kategori)

             // Buat produk dan hubungkan dengan kategori
             val products = request.products.map { productRequest ->
                 Product(nama_produk = productRequest.nama_produk, categories = category)
             }
             category.products.addAll(products)

             // Simpan kategori dan produk
             val savedCategory = categoryRepository.save(category)

             // Konversi ke response
             return convertToCategoryResponse(savedCategory)
         }

         @Transactional
         override fun update(id: Long, request: UpdateCategoryWithProductsRequest): CategoryResponse {
             // Validasi request
             if (request.nama_kategori.isNullOrBlank()) {
                 throw IllegalArgumentException("Nama kategori tidak boleh kosong")
             }
             if (request.products.isNullOrEmpty()) {
                 throw IllegalArgumentException("Produk tidak boleh kosong")
             }

             // Cari kategori
             val category = categoryRepository.findById(id).orElseThrow {
                 NotFoundException("Category not found")
             }

             // Perbarui kategori
             category.nama_kategori = request.nama_kategori
             category.updatedAt = Date()

             // Perbarui produk
             val updatedProducts = request.products.map { productRequest ->
                 val product = productRepository.findById(productRequest.id_produk).orElseThrow {
                     NotFoundException("Product not found")
                 }
                 product.nama_produk = productRequest.nama_produk
                 product.updatedAt = Date()
                 product
             }

             // Hapus produk yang tidak ada dalam request
             val productsToRemove = category.products.filter { existingProduct ->
                 !updatedProducts.any { it.id_produk == existingProduct.id_produk }
             }
             category.products.removeAll(productsToRemove)

             // Tambahkan atau perbarui produk
             category.products.addAll(updatedProducts)

             // Simpan perubahan
             val updatedCategory = categoryRepository.save(category)

             // Konversi ke response
             return convertToCategoryResponse(updatedCategory)
         }

         // Metode lainnya (get, delete, list) tetap sama

         private fun convertToCategoryResponse(category: Category): CategoryResponse {
             return CategoryResponse(
                 id_kategori = category.id_kategori!!,
                 nama_kategori = category.nama_kategori,
                 createdAt = category.createdAt,
                 updatedAt = category.updatedAt,
                 products = category.products.map { product ->
                     ProductResponse(
                         id_produk = product.id_produk!!,
                         nama_produk = product.nama_produk
                     )
                 }
             )
         }
     }